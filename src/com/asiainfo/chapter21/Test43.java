package com.asiainfo.chapter21;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

/**
 * IntGenerator
 * 
 * @author zhangzw8
 * @date 2016年3月29日 上午9:34:27
 */
public class Test43 {
	public static void main(String[] args) {
		EvenGenerator eg = new EvenGenerator();
		ExecutorService es = Executors.newCachedThreadPool();
		for (int i = 1; i <= 10; i++) {
			es.execute(new EvenChecker(eg));
		}
	}
}

class IntGenerator {
	private volatile boolean isCanceled;// 默认为false

	public int next() {
		return 0;
	}

	public void cancel() {
		isCanceled = true;
	}

	public boolean isCanceled() {// 属性的方法可以同名，但不建议这么做
		return isCanceled;
	}
}

class EvenGenerator extends IntGenerator {
	private int i;

	@Override
	public int next() {
		i++;
		Thread.currentThread().yield();
		i++;
		return i;
	}
}

class EvenChecker implements Runnable {
	private IntGenerator intGenerator;

	public EvenChecker(IntGenerator ig) {
		super();
		this.intGenerator = ig;
	}

	public EvenChecker() {
		super();
	}

	@Override
	public void run() {
		while (!intGenerator.isCanceled()) {
			int i = intGenerator.next();
			if (i % 2 != 0) {
				System.out.println(i + " is not even!Generated by " + Thread.currentThread().getName());
				intGenerator.cancel();
			} else {
				System.out.println(Thread.currentThread().getName() + " generates " + i);
			}
		}
		System.out.println("finished!");
	}
}